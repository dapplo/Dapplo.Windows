// Copyright (c) Dapplo and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
using System;

namespace Dapplo.Windows.Enums;

/// <summary>
///     Used for User32.SetWinEventHook
///     See <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd373640.aspx">here</a>
/// </summary>
[Flags]
public enum WinEventHookFlags
{
    /// <summary>
    ///     The callback function is not mapped into the address space of the process that generates the event.
    ///     Because the hook function is called across process boundaries, the system must queue events.
    ///     Although this method is asynchronous, events are guaranteed to be in sequential order.
    ///     For more information, see Out-of-Context Hook Functions.
    /// </summary>
    OutOfContext = 0,

    /// <summary>
    ///     Prevents this instance of the hook from receiving the events that are generated by threads in this process.
    ///     This flag does not prevent threads from generating events.
    /// </summary>
    SkipOwnThread = 1,

    /// <summary>
    ///     Prevents this instance of the hook from receiving the events that are generated by the thread that is registering
    ///     this hook.
    /// </summary>
    SkipOwnProcess = 2,

    /// <summary>
    ///     The DLL that contains the callback function is mapped into the address space of the process that generates the
    ///     event.
    ///     With this flag, the system sends event notifications to the callback function as they occur.
    ///     The hook function must be in a DLL when this flag is specified.
    ///     This flag has no effect when both the calling process and the generating process are not 32-bit or 64-bit
    ///     processes,
    ///     or when the generating process is a console application.
    ///     For more information, see In-Context Hook Functions.
    /// </summary>
    InContext = 4
}